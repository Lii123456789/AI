import random

def calculate_distance(route, dist_matrix):
    distance = 0
    for i in range(len(route) - 1):
        distance += dist_matrix[route[i]][route[i+1]]
    distance += dist_matrix[route[-1]][route[0]]
    return distance

def generate_neighbor(route):
    neighbor = route[:]
    i, j = random.sample(range(len(route)), 2)
    neighbor[i], neighbor[j] = neighbor[j], neighbor[i]
    return neighbor

def hill_climbing(dist_matrix):
    cities = list(range(len(dist_matrix)))
    current_route = random.sample(cities, len(cities))
    current_distance = calculate_distance(current_route, dist_matrix)

    while True:
        neighbors = [generate_neighbor(current_route) for _ in range(100)]
        next_route = min(neighbors, key=lambda route: calculate_distance(route, dist_matrix))
        next_distance = calculate_distance(next_route, dist_matrix)

        if next_distance < current_distance:
            current_route = next_route
            current_distance = next_distance
        else:
            break

    return current_route, current_distance

if __name__ == "__main__":
    dist_matrix = [
        [0, 10, 15, 20, 25],
        [10, 0, 35, 25, 30],
        [15, 35, 0, 30, 5],
        [20, 25, 30, 0, 15],
        [25, 30, 5, 15, 0]
    ]

    best_route, best_distance = hill_climbing(dist_matrix)
    print("Best route:", best_route)
    print("Total distance:", best_distance)
